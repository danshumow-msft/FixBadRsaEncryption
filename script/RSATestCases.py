from RSAMath import *

def make_private_key(p, q, N, e):
    if (N != p*q):
        raise ValueError("N != p*q when importing private key values.")
    d = calculate_decrypt_exponent(p, q, e)
    return {"p":p, "q":q, "N":N, "e":e, "d":d}
     

# Valid Private Keys

e = 2^16 + 1

p1 = 6713277166149384494019632560532048703727019845384029445811568975213646713260637659761896516129236387479284253987944926339566177972189098119002316964080959
q1 = 2023473461863922695496541615588159997554475163480831682142617138075971848357083299768789049645893483786382539432863607544379333837225224190853501564735311
N1 = 13584138187840319590128800213843648726097076728810427195496243169324931926538580504907814121415429172617307868252888417510787793985526153243365783760916682907755493790465604046236268772735381099928470077920330592837769835953171980686272536077156413024198922266581844588151027441694349660646753018295210043249

p2 = 481244740508279853414426733501523250761976026328246428548704206440000731588939523022049114580795365231827939018394125964733582790378305861288229653329137053442473277008584138362032765798457583942495138964631075571284314304831730689
q2 = 203235329402687407843442217001701813952051811459526526555249592794871404637516905971947671195212845262271499175904145337461543139733943052474955811463098056347114369831448424923488185126481856227520005362875456792460951616040033043
N2 = 97805933360511080326321997586085253009015774907534053406576370458057747037223523118862803686379952780838382471654092234083666474423159442948789646177742175148873903575210646782199681753396663858853822527110111292862579721593257182806213674184173078568928733095954132976437042591146353906318249718403494625123361763032390956777708798674458968815601756715593996619871183420429935777084223956460905930454927426248424151370864544111330668545467076962187206437156627

p3 = 170110546499524104073796944433570596829486775926855645762901084247670502162585450446221001113399908795769760046096375889196975795379322848369217876985085931457549813400469813955018442929675790983578140032751356842020885493515531840651662718796003791464196299834899123800596837514721134336185303685229022677579
q3 = 24638992602308965224712240768594223733984590819426388527180836375960221125036939757710516056571350803344787393710247224800265929430445282809343843336091763408703118794140474472345142850932104744127078033363167496784512359110856753653081254783667627403627476495985402441030505881925593343690246096759612148527
N3 = 4191352496776509640020108523042315484845022662684533001396813373582129158337731679505708435921839735604980581470383056691371209914837002266087500041381851150854824829611404191365350371855264679686096738287976318011266848732763402481585476445483646297449882163986118501362307131035260005502950297021327784893187292472287299923577098195276165913139177690138925925832193494422541529674137953897659672562865510191091759532095640930194075172573047752535363790431792890459436594373322654551684312548737907775914075706886027072540255839430631803790017031907667571867858278251732873091170408530213979230160311756190580776133

p4 = 1669355550761986364634971577571059148397753045546705856084168784339778577178901067295805860012533177599431403537348304403228081525265714208284795889651333796919615352532843781215997805147312132442346367268968419353068419424228712567319079047548984174626387443096400026383841295188900100205851929826693872312708412123134011196062281110095703703031592557263262219304684330638674613446027725898471528460903889721978291832778559693015222971087883419154315490652716367
q4 = 255611034446999747055461749040606538780107337279991625910535924977286689566420544852343337732716267678547548408256019295896128840324506155556151713871678856845666139476553170486632478355363711511700764370137196774732370175400035747116333321242382519519668790941833661337309069484057924095055739253397051625427595387113401025576089377337506885986166500549476639958962987248386753706427981018762446793520587732758203651060386737581842404271353705020856900967162063
N4 = 426705699190112331494485058328736477330174725311592666167861066375082855745313104086397064921305287088144026706703300057400358436964877227483685183352783940361162851949692440996030373209996929313717147796154392461737564125027472229189734884495247074375112126981171488013197402415438347843370599871961901142190298572000664677839175141169583337599352660115025961020054158287005891846627578164418813354254656507999414918188526904585436209353654448336924213562840422352153169161656546651654785346649960347351021281741401032242203280813401778854880557525679255800718883380758241502360337333563797401765739235688272634190486176744579585604619885944248819446471550295840039402114504345503367769780950586361130695380291204503436742549107303844521401903907648448522002825083760355410086078333793372391703817654621897326267884974920473632155033298183113597219733256265623990928248821631095891964589040240047229365860287420678061585121

p5 = 8657991286481854659796460553087216729488508372486768962275067453106115316621019492893246275213675179210604240311421784831924836383128480319785492679856597309260224558919537528983837342972386965629043228611340682827325973729799572043143970789219447551904262820198157299417754412347709363842206856444654312232110250264271981218813059039730946023108581984712662709473529359345157837903954666064158519221674521956008227500157712262532757151123374851470812255981126092721603849760877740891190729537750843084027212920980765228239394426228494771355876276734942342298536566921812059420164025122673819216573406727632277346307
q5 = 6995009044256795857187955697415943850509694666611045246128923217029639113735555827965431294218951096270538013451605435022088263063226077918886583952836313557730739212293194025391263794018322236371122548295238410855967520676577989123096399653404693918980730704898913657820733524868596811325132355775836984361684868215654363041862252215006550465411521841959422802859645219072660522225728163565340510396716424346277619581589056449473181509170424753842933024762977063407825645581870542796251210227501160308077235050615179460723316492959082607852622527614826339806934211628250516185259978429687963840683312904707590975071
N5 = 60562727354037104581107743940818060580670332561417805324138184098292057386341524136413849221067762751340997421291309567224071458184425520147259762235605522320237054560505647824882239441802734329505315469371075984542699423595173550139052913251129066268958349270355234745337890935073206004874522047498440717312532130918548534371561621292419458882480561587845688387100942069996738436086711523762410052669423679736634202434016107959497994554975640138077726645119480616552187622089988988328537297714348444642691512475954279986115223819092338289183704059856243717555902981245476185441965784039238746013940338313576128361213554223188215725807618217543607401657588947700039584647632087164588265005258606161756107431360382071898681626613899357125758413399924674607221035943556204660939270406063164208903150551840668916049645227711027330811842889826115135775740403789910458789196219528340395430706841756128814496084419240393007722287321535565683170368014965309451016496734229526581046137766464684482257003268873449838514665648775408375094241121478841904776912884718345783986686516290994154012349209471856594095032167882406276204583778063771287503108754180857797390032267421460046209115347547605913436160606053183676206372044292133674470912797

valid_priv_keys = [make_private_key(p1, q1, N1, e),
                   make_private_key(p2, q2, N2, e),
                   make_private_key(p3, q3, N3, e),
                   make_private_key(p4, q4, N4, e),
                   make_private_key(p5, q5, N5, e)]
#
# RSATestCases.py - Test cases of incorrectly generated RSA keys
#
# Copyright (c) Microsoft Corporation. Licensed under the MIT license.
#


# sample plaintext

pti = 0x1234567890123456789012345678901234567890123456789012345678901234
pt = pti.to_bytes(32, 'big')

# Incorrectly generated keys
def make_incorrect_key(p, q, N, e, bitlength):
    if (p*q != N):
        raise ValueError("Supplied primes do not equal supplied modulus.")
    if (0 != (p-1)*(q-1) % e):
        raise ValueError("This key is not an incorrectly generated key.")
    return {"p":p, "q":q, "N":N, "e":e, "bitlength":bitlength}

e = 2**16 + 1

bad_p1 = 6446406967979134500227507821837261646718223794770361565549068232090697008176187468326049403673759226642185682453441478074950003893163806293725825406785437
bad_q1 = 11954764586368905374228185061187116079226460861573905701159396982664153111263040767992777042061774968371796323009893531088328364334327272982976002728323881
bad_N1 = 77065277730118707285200141856966195097113876781186385160233569021266820886992590170635414095900029881043869982381424116704792023625963367594264502629094384607596639232193699434782110526697014078144427775612321820312130916955861124110992799448872105012158243848421056067414231577155752628455644281247210120997

bad_p2 = 162576682216652959321935948944839212591872509190647224166614612006411084322472158603285866528255328675345063741547536748188559181042296657151366407245728294810314273551604161555559058936658051587538430685091663443040133891340954105939523778383340983408004682727909868199319955287089245615272271734385603620607
bad_q2 = 51647833083082178897690890609350216594242596823007691620355813363940844169732250613363949388177881652597765116259334191379593393047838868429886275414562453201579494015998978996094749791794978983941747022716632540279893948905711888527411317770018810990886955162774226110283674170315065412716475600708345282831
bad_N2 = 8396733346326986858532143509791928075363880068348212764728171866787040293928888074502162329676037623008965595442078137127499360214247417028757257390673308197928648109301301808376437248368414039736958462832140317158874246461272853328304879842550084835689818018123477145223710727831269612154812032792560894645241836459762540217072762192147495607646436781085829557571688936993499874349780940951536595526332660388919707973516927335742062189530962646735879862803866826079164489105853459103841333482904495500049857207275599773090583755353221438629776932800221754978860576743387717409915935130666065285829993853523034898417

bad_p3 = 1063094772968890925020856006085773476086571365756802925175766793635984125165166318830551998931583236259566834618810376453903995474347615006965989470620100547502267687243332366211452712456462052698108613260891364761524993042349235675314475077628998433940145174227585949394481599503952052143329398288560371961988565828200400127969281224202441261651562429766194536011088332360966941712503177079815420634085841000179334838499251760815571563941670797202802027015246869
bad_q3 = 1710279215363909535347001412011302140615543860082431434496123188265450990510426056464170011807928775183358693486680578639051995463875340515319215534061775219577612118385512503464042496376361168509566091532094157012140075211849671380103516810596840332971751581392649328791976688615401686614377702214735279012701295628258254434958518996327298502767580107361328515751362318983340022926012211768293139389997194718652474320157625224053720952694638522383673649729328041
bad_N3 = 1818188894170708315526228522028511287493760787892507007098462377444505245899723880924940344767584670398564563991246196410067626612242566182630439461209592752722777736317358695090924529208195636919621522184972362932466525519969712371918285849823407939873443306890613292977310786502039689932378488543031820649171543663361167879042489898412689632850961620480375027359400312059002763185249936198537169499193719177542236709332444482831451587341571042863537958299665997680255835418140420980000090746197241648388945499359751509848930527850006450559823539515354828741478371252039311702133441985657972954491923623604569161205553181991134200643716909584957901763455323567677423366678640665954504135925685553739120360400303244468245634613825004120831991273966092285246022394993169471559674197327577392376773909964990271335566892381560034221291322961786858594786483983549897703593122164336802519287599566597492067651844938914057099153629

bad_p4 = 11264883669433325889113765432870447470909375481610621675281393448220704089486843591190539596486472761662199163647357308741126171277214064301338717936887340865122569698560073398776503174042723635591183012496783354550413699056158943588208416641411079153070050548886790052993524719426786505258656223884447044329661228836425255313506842203283017666456219984825443091475464689399157485902325117360189627502139115684974913181392124078827752214294029458262000333517670242795495113765945264902143374386383435970922234753502533610163404129440185487657204101062927803651328910358763870446762680443767083414879329821506009521257
bad_q4 = 7328323680751776874114936845372275452779807108673416465053494374036649725566482706958007771357515774769748499158600100710835592234237394933168023592405806209921615339521670918301757373822494897903742615222604158667750064413703541098564662443587954494905799994550967554892958342206092021084664785204353795219657789195362324026621222227266900749914113927442102961365174082875515378350714470691911272505006261682492025827392538796988744380204943986011240443000779989101226259202550368055572663442463944743796142847743776233886177972549716842128383745406425938965451982765866535523074866907777070010027602379087016967213
bad_N4 = 82552713755622213326624446716461496864855591710520485031651719185813112944224270596702000506125138361055504379323344835526526683644800533294877378385335930272377351597759029387326758956242268733177126575591501150422849873960160385533503201024474532736029081166138735017982066746844431055212110371782906428112738973373924867232193464903149549366638259164200279153971152139529282082484215449823269112154618391483137263658276528536095781795895692108313467661812919841118028355830638300038336955562647358471720122249476210450252565416867462315869370449433569636452621463518503916349551434136647354205461438109994198654024315878452958947517061932209479955879311281638864382046297116060205090574850489952883973039939226937971701975327583964305150799367763696149244569603680207539527452331512803879257053767174970105578243920948587705770021519578516956819373280033289759310326937596073700375178366955710803471696931560175136220143398363579268223015280137664866215724476446477305259991093883499431138248011416095236258557506112058076719324978867813678608677915572451863206745774609106043363204212084569725373889994897850451908002208698804555106452402067993929688135986904326906099201191503130221150680425464562674147582745843196686195546741

bad_priv_keys = [make_incorrect_key(bad_p1, bad_q1, bad_N1, e, 1024),
                 make_incorrect_key(bad_p2, bad_q2, bad_N2, e, 2048),
                 make_incorrect_key(bad_p3, bad_q3, bad_N3, e, 3072),
                 make_incorrect_key(bad_p4, bad_q4, bad_N4, e, 4096)]



